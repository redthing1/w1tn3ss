#!/bin/bash

# w1nj3ct injection test runner
# This script demonstrates basic injection functionality

set -e

echo "=== w1nj3ct Injection Test Suite ==="
echo "Build directory: @CMAKE_BINARY_DIR@"
echo "Library extension: @LIB_EXT@"
echo ""

W1TOOL="@CMAKE_BINARY_DIR@/w1tool"
PROGRAMS_DIR="@CMAKE_BINARY_DIR@/tests/programs"
LIBRARIES_DIR="@CMAKE_BINARY_DIR@/tests/libraries"

# check if w1tool exists
if [ ! -x "$W1TOOL" ]; then
    echo "ERROR: w1tool not found at $W1TOOL"
    exit 1
fi

echo "Testing w1tool help:"
$W1TOOL --help
echo ""

echo "Testing injection capabilities:"
echo "Available test programs:"
ls -la "$PROGRAMS_DIR"
echo ""
echo "Available test libraries:"
ls -la "$LIBRARIES_DIR"
echo ""

# Test 1: Runtime injection into simple_target
echo "=== Test 1: Runtime Injection ==="
echo "Starting simple_target in background..."
$PROGRAMS_DIR/simple_target &
TARGET_PID=$!
echo "Target PID: $TARGET_PID"

# give it a moment to start
sleep 2

echo "Attempting injection with tracer_lib..."
$W1TOOL inject --pid $TARGET_PID --library "$LIBRARIES_DIR/tracer_lib@LIB_EXT@" || echo "Injection failed (expected on unsigned macOS)"

# cleanup
echo "Stopping target process..."
kill $TARGET_PID 2>/dev/null || true
wait $TARGET_PID 2>/dev/null || true
echo ""

# Test 2: Preload injection (macOS/Linux only)
if [[ "$OSTYPE" != "msys" && "$OSTYPE" != "win32" ]]; then
    echo "=== Test 2: Preload Injection ==="
    echo "Launching simple_target with preloaded tracer_lib..."
    $W1TOOL inject --binary "$PROGRAMS_DIR/simple_target" --library "$LIBRARIES_DIR/tracer_lib@LIB_EXT@" || echo "Preload injection failed"
    echo ""
fi

echo "=== Tests Complete ==="
echo "Note: Injection may fail on macOS without proper code signing."
echo "Use the signing scripts in temp/darwin_sign/ to set up code signing."