#pragma once

#include "../../api_knowledge_db.hpp"
#include <vector>

namespace w1::abi::apis::macos {

// macOS system library APIs with correct library names and signatures
static const std::vector<api_info> macos_system_apis = {
    // stdio APIs from libsystem_c.dylib
    {.name = "_puts",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STDIO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "s", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "write string to stdout",
     .headers = {"stdio.h"}},
    {.name = "_printf",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STDIO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {
             {.name = "format", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}
             // Note: variadic args not handled yet
         },
     .return_value = {.name = "chars_written", .param_type = param_info::type::INTEGER},
     .description = "formatted output to stdout",
     .headers = {"stdio.h"}},
    {.name = "_fprintf",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STDIO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "format", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "chars_written", .param_type = param_info::type::INTEGER},
     .description = "formatted output to stream",
     .headers = {"stdio.h"}},
    {.name = "_fopen",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "stream", .param_type = param_info::type::POINTER},
     .description = "open file stream",
     .cleanup_api = "_fclose",
     .headers = {"stdio.h"}},
    {.name = "_fclose",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::CLOSES_HANDLE),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "close file stream",
     .headers = {"stdio.h"}},
    {.name = "_fread",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "ptr", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::OUT},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "nmemb", .param_type = param_info::type::COUNT, .param_direction = param_info::direction::IN},
          {.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "items_read", .param_type = param_info::type::COUNT},
     .description = "read from file stream",
     .headers = {"stdio.h"}},
    {.name = "_fwrite",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "ptr", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::IN},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "nmemb", .param_type = param_info::type::COUNT, .param_direction = param_info::direction::IN},
          {.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "items_written", .param_type = param_info::type::COUNT},
     .description = "write to file stream",
     .headers = {"stdio.h"}},
    {.name = "_fseek",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "offset", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "whence", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "seek in file stream",
     .headers = {"stdio.h"}},
    {.name = "_ftell",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "position", .param_type = param_info::type::INTEGER},
     .description = "get file stream position",
     .headers = {"stdio.h"}},
    {.name = "_fflush",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "flush file stream",
     .headers = {"stdio.h"}},
    {.name = "_feof",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "eof", .param_type = param_info::type::BOOLEAN},
     .description = "test end-of-file indicator",
     .headers = {"stdio.h"}},
    {.name = "_ferror",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::BOOLEAN},
     .description = "test error indicator",
     .headers = {"stdio.h"}},
    {.name = "_rewind",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "stream", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "void", .param_type = param_info::type::VOID},
     .description = "rewind file stream to beginning",
     .headers = {"stdio.h"}},

    // ===== C STRING FUNCTIONS (libsystem_c.dylib) =====
    {.name = "_strcpy",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::SECURITY_SENSITIVE),
     .parameters =
         {{.name = "dest", .param_type = param_info::type::STRING, .param_direction = param_info::direction::OUT},
          {.name = "src", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "dest", .param_type = param_info::type::STRING},
     .description = "copy string (unsafe - no bounds check)",
     .security_notes = {"buffer overflow risk", "use strncpy or strlcpy instead"},
     .headers = {"string.h"}},
    {.name = "_strncpy",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::SECURITY_SENSITIVE),
     .parameters =
         {{.name = "dest", .param_type = param_info::type::STRING, .param_direction = param_info::direction::OUT},
          {.name = "src", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "dest", .param_type = param_info::type::STRING},
     .description = "copy string with length limit",
     .headers = {"string.h"}},
    {.name = "_strcat",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::SECURITY_SENSITIVE),
     .parameters =
         {{.name = "dest", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN_OUT},
          {.name = "src", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "dest", .param_type = param_info::type::STRING},
     .description = "concatenate strings (unsafe - no bounds check)",
     .security_notes = {"buffer overflow risk", "use strncat or strlcat instead"},
     .headers = {"string.h"}},
    {.name = "_strncat",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::SECURITY_SENSITIVE),
     .parameters =
         {{.name = "dest", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN_OUT},
          {.name = "src", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "dest", .param_type = param_info::type::STRING},
     .description = "concatenate strings with length limit",
     .headers = {"string.h"}},
    {.name = "_strlen",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "length", .param_type = param_info::type::SIZE},
     .description = "get string length",
     .headers = {"string.h"}},
    {.name = "_strcmp",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s1", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "s2", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "compare strings",
     .headers = {"string.h"}},
    {.name = "_strncmp",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s1", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "s2", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "compare strings with length limit",
     .headers = {"string.h"}},
    {.name = "_strchr",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "c", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ptr", .param_type = param_info::type::POINTER},
     .description = "find character in string",
     .headers = {"string.h"}},
    {.name = "_strstr",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "haystack", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "needle", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ptr", .param_type = param_info::type::POINTER},
     .description = "find substring",
     .headers = {"string.h"}},
    {.name = "_memcpy",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::SECURITY_SENSITIVE),
     .parameters =
         {{.name = "dest", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::OUT, .size_param_index = 2},
          {.name = "src", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::IN, .size_param_index = 2},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "dest", .param_type = param_info::type::POINTER},
     .description = "copy memory block",
     .security_notes = {"buffer overflow risk if dest too small"},
     .headers = {"string.h"}},
    {.name = "_memset",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::OUT, .size_param_index = 2},
          {.name = "c", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "s", .param_type = param_info::type::POINTER},
     .description = "fill memory with byte value",
     .headers = {"string.h"}},
    {.name = "_memcmp",
     .module = "libsystem_c.dylib",
     .api_category = api_info::category::STRING_MANIPULATION,
     .flags = 0,
     .parameters =
         {{.name = "s1", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::IN, .size_param_index = 2},
          {.name = "s2", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::IN, .size_param_index = 2},
          {.name = "n", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "compare memory blocks",
     .headers = {"string.h"}},

    // malloc APIs from libsystem_malloc.dylib
    {.name = "_malloc",
     .module = "libsystem_malloc.dylib",
     .api_category = api_info::category::HEAP_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY),
     .parameters =
         {{.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ptr", .param_type = param_info::type::POINTER},
     .description = "allocate memory",
     .cleanup_api = "_free",
     .headers = {"stdlib.h"}},
    {.name = "_free",
     .module = "libsystem_malloc.dylib",
     .api_category = api_info::category::HEAP_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FREES_MEMORY),
     .parameters =
         {{.name = "ptr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "void", .param_type = param_info::type::UNKNOWN},
     .description = "free allocated memory",
     .headers = {"stdlib.h"}},
    {.name = "_calloc",
     .module = "libsystem_malloc.dylib",
     .api_category = api_info::category::HEAP_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY),
     .parameters =
         {{.name = "nmemb", .param_type = param_info::type::COUNT, .param_direction = param_info::direction::IN},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ptr", .param_type = param_info::type::POINTER},
     .description = "allocate and zero memory",
     .cleanup_api = "_free",
     .headers = {"stdlib.h"}},
    {.name = "_realloc",
     .module = "libsystem_malloc.dylib",
     .api_category = api_info::category::HEAP_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::FREES_MEMORY),
     .parameters =
         {{.name = "ptr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "new_ptr", .param_type = param_info::type::POINTER},
     .description = "resize allocated memory",
     .headers = {"stdlib.h"}},

    // file I/O from libsystem_kernel.dylib
    {.name = "_open",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE) |
              static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "mode",
           .param_type = param_info::type::FLAGS,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "open file",
     .cleanup_api = "_close",
     .headers = {"fcntl.h"}},
    {.name = "_close",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::CLOSES_HANDLE),
     .parameters =
         {{.name = "fd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "close file descriptor",
     .headers = {"unistd.h"}},
    {.name = "_read",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::OUT,
           .size_param_index = 2},
          {.name = "count", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_read", .param_type = param_info::type::SIZE},
     .description = "read from file descriptor",
     .headers = {"unistd.h"}},
    {.name = "_write",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::IN,
           .size_param_index = 2},
          {.name = "count", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_written", .param_type = param_info::type::SIZE},
     .description = "write to file descriptor",
     .headers = {"unistd.h"}},

    // mach VM APIs
    {.name = "_mach_vm_allocate",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "target", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "address",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "kern_return", .param_type = param_info::type::ERROR_CODE},
     .description = "allocate virtual memory",
     .cleanup_api = "_mach_vm_deallocate",
     .headers = {"mach/mach_vm.h"}},

    // pthread APIs from libsystem_pthread.dylib
    {.name = "_pthread_create",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "thread", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "attr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true},
          {.name = "start_routine",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN},
          {.name = "arg", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "create new thread",
     .headers = {"pthread.h"}},

    // ===== PROCESS CONTROL APIs (libsystem_kernel.dylib) =====
    {.name = "_fork",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters = {},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "create child process",
     .headers = {"unistd.h"}},
    
    {.name = "_execve",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "argv", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "envp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "execute program",
     .headers = {"unistd.h"}},
    
    {.name = "_waitpid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "pid", .param_type = param_info::type::PROCESS_ID, .param_direction = param_info::direction::IN},
          {.name = "status", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "options", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "wait for process state changes",
     .headers = {"sys/wait.h"}},
    
    {.name = "_kill",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "pid", .param_type = param_info::type::PROCESS_ID, .param_direction = param_info::direction::IN},
          {.name = "sig", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "send signal to process",
     .headers = {"signal.h"}},
    
    {.name = "_getpid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = 0,
     .parameters = {},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "get process ID",
     .headers = {"unistd.h"}},
    
    {.name = "_getppid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = 0,
     .parameters = {},
     .return_value = {.name = "ppid", .param_type = param_info::type::PROCESS_ID},
     .description = "get parent process ID",
     .headers = {"unistd.h"}},
    
    {.name = "_exit",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "status", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "void", .param_type = param_info::type::VOID},
     .description = "terminate process",
     .headers = {"unistd.h"}},

    // ===== ADDITIONAL FILE SYSTEM APIs =====
    {.name = "_stat",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "statbuf", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get file status",
     .headers = {"sys/stat.h"}},
    
    {.name = "_unlink",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "delete file",
     .headers = {"unistd.h"}},
    
    {.name = "_chmod",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "change file permissions",
     .headers = {"sys/stat.h"}},
    
    {.name = "_access",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "check file accessibility",
     .headers = {"unistd.h"}},
    
    {.name = "_rename",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "old", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "new", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "rename file",
     .headers = {"stdio.h"}},
    
    {.name = "_mkdir",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "create directory",
     .headers = {"sys/stat.h"}},

    // ===== NETWORK APIs =====
    {.name = "_socket",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .parameters =
         {{.name = "domain", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "type", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "protocol", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "create socket",
     .cleanup_api = "_close",
     .headers = {"sys/socket.h"}},
    
    {.name = "_connect",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "addr", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN},
          {.name = "addrlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "connect socket",
     .headers = {"sys/socket.h"}},
    
    {.name = "_bind",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO),
     .parameters =
         {{.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "addr", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN},
          {.name = "addrlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "bind socket to address",
     .headers = {"sys/socket.h"}},
    
    {.name = "_send",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::IN, .size_param_index = 2},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_sent", .param_type = param_info::type::SIZE},
     .description = "send data on socket",
     .headers = {"sys/socket.h"}},
    
    {.name = "_recv",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .parameters =
         {{.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf", .param_type = param_info::type::BUFFER, .param_direction = param_info::direction::OUT, .size_param_index = 2},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_received", .param_type = param_info::type::SIZE},
     .description = "receive data from socket",
     .headers = {"sys/socket.h"}},

    // ===== DYNAMIC LOADING APIs =====
    {.name = "_dlopen",
     .module = "libdyld.dylib",
     .api_category = api_info::category::LIBRARY_LOADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "filename", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "handle", .param_type = param_info::type::HANDLE},
     .description = "open dynamic library",
     .cleanup_api = "_dlclose",
     .headers = {"dlfcn.h"}},
    
    {.name = "_dlsym",
     .module = "libdyld.dylib",
     .api_category = api_info::category::LIBRARY_LOADING,
     .flags = 0,
     .parameters =
         {{.name = "handle", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "symbol", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "address", .param_type = param_info::type::POINTER},
     .description = "get symbol from library",
     .headers = {"dlfcn.h"}},
    
    {.name = "_dlclose",
     .module = "libdyld.dylib",
     .api_category = api_info::category::LIBRARY_LOADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::CLOSES_HANDLE) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "handle", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "close dynamic library",
     .headers = {"dlfcn.h"}},

    // ===== ADDITIONAL MEMORY MANAGEMENT APIs =====
    {.name = "_mmap",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "prot", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "offset", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "address", .param_type = param_info::type::POINTER},
     .description = "map memory",
     .cleanup_api = "_munmap",
     .headers = {"sys/mman.h"}},
    
    {.name = "_munmap",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FREES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "unmap memory",
     .headers = {"sys/mman.h"}},
    
    {.name = "_mprotect",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "prot", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "set memory protection",
     .headers = {"sys/mman.h"}},

    // ===== SYSTEM INFO APIs =====
    {.name = "_getuid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .parameters = {},
     .return_value = {.name = "uid", .param_type = param_info::type::INTEGER},
     .description = "get user ID",
     .headers = {"unistd.h"}},
    
    {.name = "_geteuid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .parameters = {},
     .return_value = {.name = "euid", .param_type = param_info::type::INTEGER},
     .description = "get effective user ID",
     .headers = {"unistd.h"}},
    
    {.name = "_sysctl",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .parameters =
         {{.name = "name", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "namelen", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "oldp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "oldlenp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN_OUT},
          {.name = "newp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "newlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get/set system information",
     .headers = {"sys/sysctl.h"}},
    
    {.name = "_gettimeofday",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::TIME,
     .flags = 0,
     .parameters =
         {{.name = "tv", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT},
          {.name = "tz", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT, .is_optional = true}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get time of day",
     .headers = {"sys/time.h"}}
};

} // namespace w1::abi::apis::macos