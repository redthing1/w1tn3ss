#pragma once

#include "abi/api_knowledge_db.hpp"
#include <vector>

namespace w1::abi::apis::macos {

// determine macOS calling convention based on architecture
#if defined(__x86_64__)
#define MACOS_API_CONVENTION calling_convention_id::X86_64_SYSTEM_V
#elif defined(__aarch64__)
#define MACOS_API_CONVENTION calling_convention_id::AARCH64_AAPCS
#elif defined(__arm__)
#define MACOS_API_CONVENTION calling_convention_id::ARM32_AAPCS
#elif defined(__i386__)
#define MACOS_API_CONVENTION calling_convention_id::X86_CDECL
#else
#warning "Unknown macOS architecture, using UNKNOWN calling convention"
#define MACOS_API_CONVENTION calling_convention_id::UNKNOWN
#endif

/**
 * @brief libsystem_kernel.dylib api definitions
 *
 * covers kernel system call apis:
 * - file i/o (open, close, read, write)
 * - process control (fork, exec, exit, wait)
 * - memory management (mmap, munmap, mprotect)
 * - network operations (socket, connect, bind)
 * - file system operations (stat, chmod, mkdir)
 * - device i/o (ioctl)
 * - synchronization (select, poll)
 */

static const std::vector<api_info> macos_libsystem_kernel_apis = {
    // ===== FILE I/O APIs =====
    {.name = "_open",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE) |
              static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "mode",
           .param_type = param_info::type::FLAGS,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "open file",
     .cleanup_api = "_close",
     .headers = {"fcntl.h"}},
    {.name = "_close",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::CLOSES_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "close file descriptor",
     .headers = {"unistd.h"}},
    {.name = "_read",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::OUT,
           .size_param_index = 2},
          {.name = "count", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_read", .param_type = param_info::type::SIZE},
     .description = "read from file descriptor",
     .headers = {"unistd.h"}},
    {.name = "_write",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::IN,
           .size_param_index = 2},
          {.name = "count", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_written", .param_type = param_info::type::SIZE},
     .description = "write to file descriptor",
     .headers = {"unistd.h"}},
    {.name = "_lseek",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "offset", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "whence", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "position", .param_type = param_info::type::INTEGER},
     .description = "reposition file descriptor offset",
     .headers = {"unistd.h"}},
    {.name = "_dup",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "oldfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "newfd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "duplicate file descriptor",
     .cleanup_api = "_close",
     .headers = {"unistd.h"}},
    {.name = "_dup2",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE) |
              static_cast<uint32_t>(api_info::behavior_flags::CLOSES_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "oldfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "newfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "duplicate file descriptor to specific fd",
     .headers = {"unistd.h"}},
    {.name = "_pipe",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pipefd", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "create pipe",
     .headers = {"unistd.h"}},
    {.name = "_fcntl",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "cmd", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "manipulate file descriptor",
     .headers = {"fcntl.h"}},
    {.name = "_ioctl",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::DEVICE_IO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "request", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "control device",
     .headers = {"sys/ioctl.h"}},
    {.name = "_select",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "nfds", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "readfds",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "writefds",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "exceptfds",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "timeout", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ready", .param_type = param_info::type::INTEGER},
     .description = "synchronous i/o multiplexing",
     .headers = {"sys/select.h"}},
    {.name = "_poll",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_IO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "fds", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN_OUT},
          {.name = "nfds", .param_type = param_info::type::COUNT, .param_direction = param_info::direction::IN},
          {.name = "timeout", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "ready", .param_type = param_info::type::INTEGER},
     .description = "wait for events on file descriptors",
     .headers = {"poll.h"}},

    // ===== PROCESS CONTROL APIs =====
    {.name = "_fork",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "create child process",
     .headers = {"unistd.h"}},
    {.name = "_execve",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "argv", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "envp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "execute program",
     .headers = {"unistd.h"}},
    {.name = "_exit",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "status", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "void", .param_type = param_info::type::VOID},
     .description = "terminate process",
     .headers = {"unistd.h"}},
    {.name = "_waitpid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pid", .param_type = param_info::type::PROCESS_ID, .param_direction = param_info::direction::IN},
          {.name = "status", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "options", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "wait for process state changes",
     .headers = {"sys/wait.h"}},
    {.name = "_kill",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pid", .param_type = param_info::type::PROCESS_ID, .param_direction = param_info::direction::IN},
          {.name = "sig", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "send signal to process",
     .headers = {"signal.h"}},
    {.name = "_getpid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "pid", .param_type = param_info::type::PROCESS_ID},
     .description = "get process id",
     .headers = {"unistd.h"}},
    {.name = "_getppid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::PROCESS_CONTROL,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "ppid", .param_type = param_info::type::PROCESS_ID},
     .description = "get parent process id",
     .headers = {"unistd.h"}},

    // ===== MEMORY MANAGEMENT APIs =====
    {.name = "_mmap",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "prot", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN},
          {.name = "fd", .param_type = param_info::type::FILE_DESCRIPTOR, .param_direction = param_info::direction::IN},
          {.name = "offset", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "address", .param_type = param_info::type::POINTER},
     .description = "map memory",
     .cleanup_api = "_munmap",
     .headers = {"sys/mman.h"}},
    {.name = "_munmap",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FREES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "unmap memory",
     .headers = {"sys/mman.h"}},
    {.name = "_mprotect",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "addr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "length", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "prot", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "set memory protection",
     .headers = {"sys/mman.h"}},

    // mach vm apis
    {.name = "_mach_vm_allocate",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::MEMORY_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::ALLOCATES_MEMORY) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "target", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "address",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "size", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "kern_return", .param_type = param_info::type::ERROR_CODE},
     .description = "allocate virtual memory",
     .cleanup_api = "_mach_vm_deallocate",
     .headers = {"mach/mach_vm.h"}},

    // ===== FILE SYSTEM APIs =====
    {.name = "_stat",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "statbuf", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get file status",
     .headers = {"sys/stat.h"}},
    {.name = "_unlink",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "delete file",
     .headers = {"unistd.h"}},
    {.name = "_chmod",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "change file permissions",
     .headers = {"sys/stat.h"}},
    {.name = "_access",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "check file accessibility",
     .headers = {"unistd.h"}},
    {.name = "_mkdir",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "mode", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "create directory",
     .headers = {"sys/stat.h"}},
    {.name = "_rmdir",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "remove empty directory",
     .headers = {"unistd.h"}},
    {.name = "_chdir",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "path", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "change working directory",
     .headers = {"unistd.h"}},
    {.name = "_link",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "oldpath", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "newpath", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "create hard link",
     .headers = {"unistd.h"}},
    {.name = "_symlink",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "target", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "linkpath", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "create symbolic link",
     .headers = {"unistd.h"}},
    {.name = "_readlink",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::FILE_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "pathname", .param_type = param_info::type::PATH, .param_direction = param_info::direction::IN},
          {.name = "buf", .param_type = param_info::type::STRING, .param_direction = param_info::direction::OUT},
          {.name = "bufsiz", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes", .param_type = param_info::type::SIZE},
     .description = "read value of symbolic link",
     .headers = {"unistd.h"}},
    {.name = "_umask",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::FILE_MANAGEMENT,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mask", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "oldmask", .param_type = param_info::type::FLAGS},
     .description = "set file mode creation mask",
     .headers = {"sys/stat.h"}},

    // ===== NETWORK APIs =====
    {.name = "_socket",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "domain", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "type", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "protocol", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "sockfd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "create socket",
     .cleanup_api = "_close",
     .headers = {"sys/socket.h"}},
    {.name = "_connect",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "addr", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN},
          {.name = "addrlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "connect socket",
     .headers = {"sys/socket.h"}},
    {.name = "_bind",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "addr", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN},
          {.name = "addrlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "bind socket to address",
     .headers = {"sys/socket.h"}},
    {.name = "_listen",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "backlog", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "listen for connections on socket",
     .headers = {"sys/socket.h"}},
    {.name = "_accept",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING) |
              static_cast<uint32_t>(api_info::behavior_flags::OPENS_HANDLE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "addr", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT},
          {.name = "addrlen",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT}},
     .return_value = {.name = "newsockfd", .param_type = param_info::type::FILE_DESCRIPTOR},
     .description = "accept connection on socket",
     .cleanup_api = "_close",
     .headers = {"sys/socket.h"}},
    {.name = "_send",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::IN,
           .size_param_index = 2},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_sent", .param_type = param_info::type::SIZE},
     .description = "send data on socket",
     .headers = {"sys/socket.h"}},
    {.name = "_recv",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::NETWORK_SOCKET,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::NETWORK_IO) |
              static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "sockfd",
           .param_type = param_info::type::FILE_DESCRIPTOR,
           .param_direction = param_info::direction::IN},
          {.name = "buf",
           .param_type = param_info::type::BUFFER,
           .param_direction = param_info::direction::OUT,
           .size_param_index = 2},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN},
          {.name = "flags", .param_type = param_info::type::FLAGS, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "bytes_received", .param_type = param_info::type::SIZE},
     .description = "receive data from socket",
     .headers = {"sys/socket.h"}},

    // ===== SYSTEM INFO APIs =====
    {.name = "_getuid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "uid", .param_type = param_info::type::INTEGER},
     .description = "get user id",
     .headers = {"unistd.h"}},
    {.name = "_geteuid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "euid", .param_type = param_info::type::INTEGER},
     .description = "get effective user id",
     .headers = {"unistd.h"}},
    {.name = "_getgid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "gid", .param_type = param_info::type::INTEGER},
     .description = "get group id",
     .headers = {"unistd.h"}},
    {.name = "_getegid",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "egid", .param_type = param_info::type::INTEGER},
     .description = "get effective group id",
     .headers = {"unistd.h"}},
    {.name = "_sysctl",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "name", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "namelen", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "oldp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "oldlenp",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "newp", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "newlen", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get/set system information",
     .headers = {"sys/sysctl.h"}},
    {.name = "_gettimeofday",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::TIME,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "tv", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT},
          {.name = "tz",
           .param_type = param_info::type::STRUCT,
           .param_direction = param_info::direction::OUT,
           .is_optional = true}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get time of day",
     .headers = {"sys/time.h"}},
    {.name = "_gethostname",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "name", .param_type = param_info::type::STRING, .param_direction = param_info::direction::OUT},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "get hostname",
     .headers = {"unistd.h"}},
    {.name = "_sethostname",
     .module = "libsystem_kernel.dylib",
     .api_category = api_info::category::SYSTEM_INFO,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "name", .param_type = param_info::type::STRING, .param_direction = param_info::direction::IN},
          {.name = "len", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "result", .param_type = param_info::type::INTEGER},
     .description = "set hostname",
     .headers = {"unistd.h"}}
};

} // namespace w1::abi::apis::macos