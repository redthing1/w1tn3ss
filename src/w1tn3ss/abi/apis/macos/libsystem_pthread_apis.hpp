#pragma once

#include "abi/api_knowledge_db.hpp"
#include <vector>

namespace w1::abi::apis::macos {

// determine macOS calling convention based on architecture
#if defined(__x86_64__)
#define MACOS_API_CONVENTION calling_convention_id::X86_64_SYSTEM_V
#elif defined(__aarch64__)
#define MACOS_API_CONVENTION calling_convention_id::AARCH64_AAPCS
#elif defined(__arm__)
#define MACOS_API_CONVENTION calling_convention_id::ARM32_AAPCS
#elif defined(__i386__)
#define MACOS_API_CONVENTION calling_convention_id::X86_CDECL
#else
#warning "Unknown macOS architecture, using UNKNOWN calling convention"
#define MACOS_API_CONVENTION calling_convention_id::UNKNOWN
#endif

/**
 * @brief libsystem_pthread.dylib api definitions
 *
 * covers pthread threading apis:
 * - thread creation and management
 * - thread synchronization (mutexes, conditions)
 * - thread-local storage
 * - thread attributes
 */

static const std::vector<api_info> macos_libsystem_pthread_apis = {
    // ===== THREAD MANAGEMENT APIs =====
    {.name = "_pthread_create",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "attr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true},
          {.name = "start_routine",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN},
          {.name = "arg", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "create new thread",
     .headers = {"pthread.h"}},
    {.name = "_pthread_join",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "value_ptr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "wait for thread termination",
     .headers = {"pthread.h"}},
    {.name = "_pthread_detach",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "detach thread",
     .headers = {"pthread.h"}},
    {.name = "_pthread_exit",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "value_ptr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "void", .param_type = param_info::type::VOID},
     .description = "terminate calling thread",
     .headers = {"pthread.h"}},
    {.name = "_pthread_self",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "thread", .param_type = param_info::type::HANDLE},
     .description = "get current thread id",
     .headers = {"pthread.h"}},
    {.name = "_pthread_equal",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "t1", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "t2", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "equal", .param_type = param_info::type::BOOLEAN},
     .description = "compare thread ids",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cancel",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "cancel thread execution",
     .headers = {"pthread.h"}},
    {.name = "_pthread_kill",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "sig", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "send signal to thread",
     .headers = {"signal.h", "pthread.h"}},

    // ===== MUTEX APIs =====
    {.name = "_pthread_mutex_init",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::MUTEX,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "attr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "initialize mutex",
     .cleanup_api = "_pthread_mutex_destroy",
     .headers = {"pthread.h"}},
    {.name = "_pthread_mutex_destroy",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::MUTEX,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "destroy mutex",
     .headers = {"pthread.h"}},
    {.name = "_pthread_mutex_lock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::MUTEX,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "lock mutex",
     .headers = {"pthread.h"}},
    {.name = "_pthread_mutex_unlock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::MUTEX,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "unlock mutex",
     .headers = {"pthread.h"}},
    {.name = "_pthread_mutex_trylock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::MUTEX,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "try to lock mutex without blocking",
     .headers = {"pthread.h"}},

    // ===== CONDITION VARIABLE APIs =====
    {.name = "_pthread_cond_init",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "attr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "initialize condition variable",
     .cleanup_api = "_pthread_cond_destroy",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cond_destroy",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "destroy condition variable",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cond_wait",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "wait on condition variable",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cond_timedwait",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "mutex", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "abstime", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "wait on condition variable with timeout",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cond_signal",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "signal condition variable",
     .headers = {"pthread.h"}},
    {.name = "_pthread_cond_broadcast",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "cond", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "broadcast condition variable",
     .headers = {"pthread.h"}},

    // ===== THREAD-LOCAL STORAGE APIs =====
    {.name = "_pthread_key_create",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "key", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "destructor",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "create thread-local storage key",
     .cleanup_api = "_pthread_key_delete",
     .headers = {"pthread.h"}},
    {.name = "_pthread_key_delete",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "key", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "delete thread-local storage key",
     .headers = {"pthread.h"}},
    {.name = "_pthread_getspecific",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "key", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "value", .param_type = param_info::type::POINTER},
     .description = "get thread-local storage value",
     .headers = {"pthread.h"}},
    {.name = "_pthread_setspecific",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "key", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "value", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "set thread-local storage value",
     .headers = {"pthread.h"}},

    // ===== THREAD ATTRIBUTE APIs =====
    {.name = "_pthread_attr_init",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "attr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "initialize thread attributes",
     .cleanup_api = "_pthread_attr_destroy",
     .headers = {"pthread.h"}},
    {.name = "_pthread_attr_destroy",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "attr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "destroy thread attributes",
     .headers = {"pthread.h"}},
    {.name = "_pthread_attr_setdetachstate",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "attr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "detachstate",
           .param_type = param_info::type::INTEGER,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "set thread detach state",
     .headers = {"pthread.h"}},
    {.name = "_pthread_attr_setstacksize",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "attr", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN},
          {.name = "stacksize", .param_type = param_info::type::SIZE, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "set thread stack size",
     .headers = {"pthread.h"}},

    // ===== READ-WRITE LOCK APIs =====
    {.name = "_pthread_rwlock_init",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "rwlock", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "attr",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN,
           .is_optional = true}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "initialize read-write lock",
     .cleanup_api = "_pthread_rwlock_destroy",
     .headers = {"pthread.h"}},
    {.name = "_pthread_rwlock_destroy",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "rwlock", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "destroy read-write lock",
     .headers = {"pthread.h"}},
    {.name = "_pthread_rwlock_rdlock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "rwlock", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "acquire read lock",
     .headers = {"pthread.h"}},
    {.name = "_pthread_rwlock_wrlock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::BLOCKING),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "rwlock", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "acquire write lock",
     .headers = {"pthread.h"}},
    {.name = "_pthread_rwlock_unlock",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::SYNCHRONIZATION,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "rwlock", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "release read-write lock",
     .headers = {"pthread.h"}},

    // ===== THREAD SCHEDULING =====
    {.name = "_pthread_setschedparam",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "policy", .param_type = param_info::type::INTEGER, .param_direction = param_info::direction::IN},
          {.name = "param", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "set thread scheduling parameters",
     .headers = {"pthread.h"}},
    {.name = "_pthread_getschedparam",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "thread", .param_type = param_info::type::HANDLE, .param_direction = param_info::direction::IN},
          {.name = "policy", .param_type = param_info::type::POINTER, .param_direction = param_info::direction::OUT},
          {.name = "param", .param_type = param_info::type::STRUCT, .param_direction = param_info::direction::OUT}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "get thread scheduling parameters",
     .headers = {"pthread.h"}},

    // ===== MISC THREAD APIs =====
    {.name = "_pthread_once",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = static_cast<uint32_t>(api_info::behavior_flags::MODIFIES_GLOBAL_STATE),
     .convention = MACOS_API_CONVENTION,
     .parameters =
         {{.name = "once_control",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN_OUT},
          {.name = "init_routine",
           .param_type = param_info::type::POINTER,
           .param_direction = param_info::direction::IN}},
     .return_value = {.name = "error", .param_type = param_info::type::ERROR_CODE},
     .description = "execute function once",
     .headers = {"pthread.h"}},
    {.name = "_pthread_yield_np",
     .module = "libsystem_pthread.dylib",
     .api_category = api_info::category::THREADING,
     .flags = 0,
     .convention = MACOS_API_CONVENTION,
     .parameters = {},
     .return_value = {.name = "void", .param_type = param_info::type::VOID},
     .description = "yield processor to other threads",
     .headers = {"pthread.h"}}
};

} // namespace w1::abi::apis::macos