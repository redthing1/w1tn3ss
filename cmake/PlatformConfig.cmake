# platform and architecture detection
include_guard()

# detect platform for qbdi
function(detect_qbdi_platform)
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(QBDI_PLATFORM "linux" CACHE STRING "QBDI Platform" FORCE)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        set(QBDI_PLATFORM "osx" CACHE STRING "QBDI Platform" FORCE)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        set(QBDI_PLATFORM "windows" CACHE STRING "QBDI Platform" FORCE)
    else()
        message(FATAL_ERROR "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
    endif()
    
    message(STATUS "QBDI Platform: ${QBDI_PLATFORM}")
endfunction()

# detect and configure architecture
function(detect_architecture)
    if(NOT DEFINED WITNESS_ARCH OR WITNESS_ARCH STREQUAL "Auto")
        # auto-detect architecture
        if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86_64|AMD64)$")
            set(QBDI_ARCH "X86_64" CACHE STRING "QBDI Architecture")
            set(WITNESS_ARCH "x64" CACHE STRING "Witness Architecture")
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(i386|i686)$")
            set(QBDI_ARCH "X86" CACHE STRING "QBDI Architecture")
            set(WITNESS_ARCH "x86" CACHE STRING "Witness Architecture")
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64)$")
            set(QBDI_ARCH "AARCH64" CACHE STRING "QBDI Architecture")
            set(WITNESS_ARCH "arm64" CACHE STRING "Witness Architecture")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
            set(QBDI_ARCH "ARM" CACHE STRING "QBDI Architecture")
            set(WITNESS_ARCH "arm" CACHE STRING "Witness Architecture")
        else()
            message(FATAL_ERROR "Unsupported architecture: ${CMAKE_SYSTEM_PROCESSOR}")
        endif()
        message(STATUS "Auto-detected architecture: ${WITNESS_ARCH}")
    else()
        # user-specified architecture
        if(WITNESS_ARCH STREQUAL "x64")
            set(QBDI_ARCH "X86_64" CACHE STRING "QBDI Architecture")
        elseif(WITNESS_ARCH STREQUAL "x86")
            set(QBDI_ARCH "X86" CACHE STRING "QBDI Architecture")
        elseif(WITNESS_ARCH STREQUAL "arm64")
            set(QBDI_ARCH "AARCH64" CACHE STRING "QBDI Architecture")
        else()
            message(FATAL_ERROR "Invalid WITNESS_ARCH: ${WITNESS_ARCH}. Must be: x64, x86, arm64, Auto")
        endif()
        message(STATUS "User-specified architecture: ${WITNESS_ARCH}")
    endif()
    
    message(STATUS "WITNESS Architecture: ${WITNESS_ARCH}")
    message(STATUS "QBDI Architecture: ${QBDI_ARCH}")
endfunction()

# configure qbdi build options
function(configure_qbdi_options)
    set(QBDI_STATIC_LIBRARY ON PARENT_SCOPE)
    set(QBDI_SHARED_LIBRARY ON PARENT_SCOPE)
    set(QBDI_LOG_DEBUG OFF PARENT_SCOPE)
    set(QBDI_TOOLS_QBDIPRELOAD ON PARENT_SCOPE)
    set(QBDI_CCACHE ON PARENT_SCOPE)
    set(QBDI_DISABLE_AVX OFF PARENT_SCOPE)
    set(QBDI_ASAN OFF PARENT_SCOPE)

    if(WITNESS_QBDI_EXTRAS)
        set(QBDI_TOOLS_PYQBDI ON PARENT_SCOPE)
        set(QBDI_TOOLS_FRIDAQBDI ON PARENT_SCOPE)
        set(QBDI_TEST ON PARENT_SCOPE)
        set(QBDI_EXAMPLES ON PARENT_SCOPE)
        set(QBDI_BENCHMARK ON PARENT_SCOPE)
    else()
        set(QBDI_TOOLS_PYQBDI OFF PARENT_SCOPE)
        set(QBDI_TOOLS_FRIDAQBDI OFF PARENT_SCOPE)
        set(QBDI_TEST OFF PARENT_SCOPE)
        set(QBDI_EXAMPLES ON PARENT_SCOPE)
        set(QBDI_BENCHMARK OFF PARENT_SCOPE)
    endif()
endfunction()